package research.EncodingTutorial.avro.schema;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"fields\":[{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"favoriteNumber\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"interests\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence userName;
  @Deprecated public java.lang.Long favoriteNumber;
  @Deprecated public java.util.List<java.lang.CharSequence> interests;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(java.lang.CharSequence userName, java.lang.Long favoriteNumber, java.util.List<java.lang.CharSequence> interests) {
    this.userName = userName;
    this.favoriteNumber = favoriteNumber;
    this.interests = interests;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userName;
    case 1: return favoriteNumber;
    case 2: return interests;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userName = (java.lang.CharSequence)value$; break;
    case 1: favoriteNumber = (java.lang.Long)value$; break;
    case 2: interests = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userName' field.
   */
  public java.lang.CharSequence getUserName() {
    return userName;
  }

  /**
   * Sets the value of the 'userName' field.
   * @param value the value to set.
   */
  public void setUserName(java.lang.CharSequence value) {
    this.userName = value;
  }

  /**
   * Gets the value of the 'favoriteNumber' field.
   */
  public java.lang.Long getFavoriteNumber() {
    return favoriteNumber;
  }

  /**
   * Sets the value of the 'favoriteNumber' field.
   * @param value the value to set.
   */
  public void setFavoriteNumber(java.lang.Long value) {
    this.favoriteNumber = value;
  }

  /**
   * Gets the value of the 'interests' field.
   */
  public java.util.List<java.lang.CharSequence> getInterests() {
    return interests;
  }

  /**
   * Sets the value of the 'interests' field.
   * @param value the value to set.
   */
  public void setInterests(java.util.List<java.lang.CharSequence> value) {
    this.interests = value;
  }

  /** Creates a new Person RecordBuilder */
  public static Person.Builder newBuilder() {
    return new Person.Builder();
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static Person.Builder newBuilder(Person.Builder other) {
    return new Person.Builder(other);
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static Person.Builder newBuilder(Person other) {
    return new Person.Builder(other);
  }
  
  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private java.lang.CharSequence userName;
    private java.lang.Long favoriteNumber;
    private java.util.List<java.lang.CharSequence> interests;

    /** Creates a new Builder */
    private Builder() {
      super(Person.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userName)) {
        this.userName = data().deepCopy(fields()[0].schema(), other.userName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.favoriteNumber)) {
        this.favoriteNumber = data().deepCopy(fields()[1].schema(), other.favoriteNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interests)) {
        this.interests = data().deepCopy(fields()[2].schema(), other.interests);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Person instance */
    private Builder(Person other) {
            super(Person.SCHEMA$);
      if (isValidValue(fields()[0], other.userName)) {
        this.userName = data().deepCopy(fields()[0].schema(), other.userName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.favoriteNumber)) {
        this.favoriteNumber = data().deepCopy(fields()[1].schema(), other.favoriteNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interests)) {
        this.interests = data().deepCopy(fields()[2].schema(), other.interests);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'userName' field */
    public java.lang.CharSequence getUserName() {
      return userName;
    }
    
    /** Sets the value of the 'userName' field */
    public Person.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.userName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'userName' field has been set */
    public boolean hasUserName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'userName' field */
    public Person.Builder clearUserName() {
      userName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'favoriteNumber' field */
    public java.lang.Long getFavoriteNumber() {
      return favoriteNumber;
    }
    
    /** Sets the value of the 'favoriteNumber' field */
    public Person.Builder setFavoriteNumber(java.lang.Long value) {
      validate(fields()[1], value);
      this.favoriteNumber = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'favoriteNumber' field has been set */
    public boolean hasFavoriteNumber() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'favoriteNumber' field */
    public Person.Builder clearFavoriteNumber() {
      favoriteNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'interests' field */
    public java.util.List<java.lang.CharSequence> getInterests() {
      return interests;
    }
    
    /** Sets the value of the 'interests' field */
    public Person.Builder setInterests(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.interests = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'interests' field has been set */
    public boolean hasInterests() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'interests' field */
    public Person.Builder clearInterests() {
      interests = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Person build() {
      try {
        Person record = new Person();
        record.userName = fieldSetFlags()[0] ? this.userName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.favoriteNumber = fieldSetFlags()[1] ? this.favoriteNumber : (java.lang.Long) defaultValue(fields()[1]);
        record.interests = fieldSetFlags()[2] ? this.interests : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
